syntax = "proto3";

package buildbarn.configuration.bb_asset_hub.fetch;

import "google/rpc/status.proto";
import "pkg/proto/configuration/blobstore/blobstore.proto";

option go_package = "github.com/buildbarn/bb-asset-hub/pkg/proto/configuration/bb_asset_hub/fetch";

message FetcherConfiguration {
  oneof backend {
    // Reads and writes to the AssetStore to return cached responses
    CachingFetcherConfiguration caching = 1;

    // Downloads blobs over HTTP and place them into a CAS for retrieval over
    // REv2 ReadBlobs requests.
    HttpFetcherConfiguration http = 2;

    // Returns a given error for all requests, can be wrapped by CachingFetcher
    // for a Push/Fetch service without any server side downloads.
    //
    // Note that in jsonnet configuration, 'error' will need to be in quotes to
    // avoid collision with a protected keyword
    google.rpc.Status error = 3;
  }

  message CachingFetcherConfiguration {
    // Fetcher to wrap and cache results from
    FetcherConfiguration fetcher = 1;
  }

  message HttpFetcherConfiguration {
    // Configuration for blob storage.
    buildbarn.configuration.blobstore.BlobAccessConfiguration
        content_addressable_storage = 1;

    // List of instances which can trigger an upload to the CAS
    repeated string allow_updates_for_instances = 2;
  }
}
