syntax = "proto3";

package buildbarn.configuration.bb_remote_asset;

import "pkg/proto/configuration/auth/auth.proto";
import "pkg/proto/configuration/blobstore/blobstore.proto";
import "pkg/proto/configuration/global/global.proto";
import "pkg/proto/configuration/grpc/grpc.proto";
import "pkg/proto/configuration/bb_remote_asset/fetch/fetcher.proto";

option go_package = "github.com/buildbarn/bb-remote-asset/pkg/proto/configuration/bb_remote_asset";

message ApplicationConfiguration {
  // Was Asset Store, this is replaced by Asset Cache
  reserved 1;

  // Was 'http_listen_address'. This option has been moved to
  // 'global.diagnostics_http_listen_address'.
  reserved 2;

  // gRPC servers to spawn to listen for remote asset API connections
  repeated buildbarn.configuration.grpc.ServerConfiguration grpc_servers = 3;

  // The content addressable storage in which the data of the assets
  // are stored
  buildbarn.configuration.blobstore.BlobAccessConfiguration
      content_addressable_storage = 4;

  // Maximum Protobuf message size to unmarshal.
  int64 maximum_message_size_bytes = 5;

  // Common configuration options that apply to all Buildbarn binaries.
  buildbarn.configuration.global.Configuration global = 6;

  // List of instances which can upload to the Cache
  // If using an Action Cache backend, uploads may still fail if the
  // Action Cache does not allow uploads from the instance name used.
  repeated string allow_updates_for_instances = 7;

  // Configuration for remote asset FetchServer
  buildbarn.configuration.bb_remote_asset.fetch.FetcherConfiguration fetcher =
      8;

  // The configuration of the asset cache, may be omitted to have no
  // caching of assets
  AssetCacheConfiguration asset_cache = 9;

  // Authorization policy for Fetch operations
  buildbarn.configuration.auth.AuthorizerConfiguration fetch_authorizer = 10;

  // Authorization policy for Push operations
  buildbarn.configuration.auth.AuthorizerConfiguration push_authorizer = 11;
}

message AssetCacheConfiguration {
  oneof backend {
    // Cache assets in a specific storage instance exclusively for
    // caching assets
    buildbarn.configuration.blobstore.BlobAccessConfiguration blob_access = 1;

    // Cache assets in an existing action cache
    buildbarn.configuration.blobstore.BlobAccessConfiguration action_cache = 2;
  }
}
